{
  "name": "caminte",
  "description": "ORM for every database: redis, mysql, neo4j, mongodb, rethinkdb, postgres, sqlite, tingodb",
  "version": "0.2.6",
  "author": {
    "name": "Aleksej Gordejev",
    "email": "aleksej@gordejev.lv",
    "url": "http://www.gordejev.lv"
  },
  "homepage": "http://camintejs.com/",
  "license": "MIT",
  "contributors": [
    {
      "name": "Aleksej Gordejev",
      "email": "aleksej@gordejev.lv"
    },
    {
      "name": "Anatoliy Chakkaev",
      "email": "rpm1602@gmail.com"
    },
    {
      "name": "Julien Guimont",
      "email": "julien.guimont@gmail.com"
    },
    {
      "name": "Joseph Junker",
      "email": "joseph.jnk@gmail.com"
    },
    {
      "name": "Henri Bergius",
      "email": "henri.bergius@iki.fi"
    },
    {
      "name": "redvulps",
      "email": "fabopereira@gmail.com"
    },
    {
      "name": "Felipe Sateler",
      "email": "fsateler@gmail.com"
    },
    {
      "name": "Amir M. Mahmoudi",
      "email": "a@geeknux.com"
    },
    {
      "name": "Justinas Stankevičius",
      "email": "justinas@justinas.me"
    },
    {
      "name": "Rick O'Toole",
      "email": "patrick.n.otoole@gmail.com"
    },
    {
      "name": "Nicholas Westlake",
      "email": "nicholasredlin@gmail.com"
    },
    {
      "name": "Michael Pauley"
    }
  ],
  "keywords": [
    "orm",
    "cross-db",
    "caminte",
    "database",
    "adapter",
    "redis",
    "mysql",
    "mariadb",
    "mongodb",
    "neo4j",
    "nano",
    "couchdb",
    "firebird",
    "postgres",
    "sqlite3",
    "tingodb",
    "rethinkdb",
    "arangodb"
  ],
  "directories": {
    "lib": "lib",
    "media": "media",
    "support": "support",
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/biggora/caminte.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "engines": [
    "node >= 0.10.0"
  ],
  "dependencies": {
    "node-uuid": ">= 1.3.3"
  },
  "devDependencies": {
    "arangojs": ">= 4.2.0",
    "async": "latest",
    "cassandra-driver": ">=2.1.0",
    "coffee-script": "*",
    "semicov": "latest",
    "should": "latest",
    "generic-pool": "latest",
    "cradle": ">= 0.6.0",
    "felix-couchdb": ">= 1.0.0",
    "istanbul": "latest",
    "jshint": "2.x",
    "mocha": "latest",
    "moment": "latest",
    "mongodb": ">= 2.0.0",
    "mongoose": ">= 3.0.0",
    "mysql": ">= 2.0.0",
    "node-neo4j": "^2.0.3",
    "pg": ">= 4.0.0",
    "redis": ">= 0.12.0",
    "rethinkdb": ">= 1.16",
    "riak-js": ">= 1.0.0",
    "sqlite3": "^3.1.1",
    "underscore": "latest"
  },
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/biggora/caminte.png?branch=master)](https://travis-ci.org/biggora/caminte)\r\n[![Dependency Status](https://gemnasium.com/biggora/caminte.png)](https://gemnasium.com/biggora/caminte)\r\n[![NPM version](https://badge.fury.io/js/caminte.png)](http://badge.fury.io/js/caminte)\r\n## About CaminteJS\r\n\r\nCaminteJS is cross-db ORM for nodejs, providing common interface to access\r\nmost popular database formats.\r\n\r\n#### CaminteJS adapters:\r\n    mysql, sqlite3, riak, postgres, couchdb, mongodb, redis, neo4j, firebird, rethinkdb, tingodb\r\n\r\n<table>\r\n    <tr>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/memory.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/mongodb.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/mysql.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/postgresql.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/sqlite.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/mariadb.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/firebird.png\"/></td>   \r\n    </tr>\r\n    <tr>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/couchdb.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/rethinkdb.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/redis.png\"/></td> \r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/tingodb.png\"/></td>      \r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/neo4j.png\"/></td> \r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/arangodb.png\"/></td>\r\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/cassandra.png\"/></td>\r\n    </tr>\r\n</table>\r\n\r\n## Installation\r\n\r\nFirst install [node.js](http://nodejs.org/). Then:\r\n\r\n    $ npm install caminte --save\r\n\r\n\r\n## Overview\r\n\r\n* [Command line interface](https://github.com/biggora/caminte#cli)\r\n* [Usage](https://github.com/biggora/caminte#usage)\r\n* [Connecting to DB](https://github.com/biggora/caminte/wiki/Connecting-to-DB#connecting)\r\n* [Defining a Model](https://github.com/biggora/caminte/wiki/Defining-a-Model#define-model)\r\n* [Define Indices](https://github.com/biggora/caminte/wiki/Defining-a-Model#define-indices)\r\n* [Define Primary Keys](https://github.com/biggora/caminte/wiki/Defining-a-Model#define-primary-keys)\r\n* [Schema data types](https://github.com/biggora/caminte/wiki/Schema-data-types#types)\r\n* [Accessing a Model](https://github.com/biggora/caminte/wiki/Defining-a-Model#accessing-a-model)\r\n* [Setup Relationships](https://github.com/biggora/caminte/wiki/Setup-Relationships-&-Validations#setup-relationships)\r\n* [Setup Validations](https://github.com/biggora/caminte/wiki/Setup-Relationships-&-Validations#setup-validations)\r\n* [Common API methods](https://github.com/biggora/caminte/wiki/Common-API-methods#api)\r\n* [Define any Custom Method](https://github.com/biggora/caminte/wiki/Common-API-methods#custom)\r\n* [Query Interface](https://github.com/biggora/caminte/wiki/Query-Interface#queries)\r\n* [Middleware (Hooks)](https://github.com/biggora/caminte/wiki/Middleware#middleware)\r\n* [Object lifecycle](https://github.com/biggora/caminte/wiki/Object-lifecycle#lifecycle)\r\n* [Your own database adapter](https://github.com/biggora/caminte/wiki/Your-own-database-adapter#adapter)\r\n* [Running tests](https://github.com/biggora/caminte/wiki/Running-tests)\r\n\r\n\r\n## Online model creator\r\n\r\nCreate CaminteJS Models in few minutes with [online model creator](http://www.camintejs.com/en/creator). \r\n\r\n## CLI\r\n\r\nUse the command line interface tool, `caminte`, to quickly create an models.\r\n\r\n    $ npm install caminte-cli -g\r\n    \r\nCreate structure:\r\n\r\n    $ caminte -i -a mysql\r\n    \r\nCreate model:\r\n\r\n    $ caminte -m User active:int name email password note:text created:date\r\n    # with tests  \r\n    $ caminte -t -m User active:int name email password note:text created:date\r\n    \r\nCreate model and routes:\r\n\r\n    $ caminte -c Post published:bool title content:text created:date\r\n    # with tests    \r\n    $ caminte -t -c User active:int name email password note:text created:date\r\n    \r\n    \r\nCreate model and routes from SQL dump:\r\n\r\n    $ caminte -d dumpfile.sql\r\n    \r\n[caminte-cli more details.](https://github.com/biggora/caminte-cli)\r\n\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar caminte = require('caminte');\r\nvar Schema  = caminte.Schema;\r\nvar schema  = new Schema('redis', {port: 6379});\r\n\r\n// define models\r\nvar Post = schema.define('Post', {\r\n    title:     { type: schema.String,  limit: 255 },\r\n    userId:    { type: schema.Number },\r\n    content:   { type: schema.Text },\r\n    created:   { type: schema.Date,    default: Date.now },\r\n    updated:   { type: schema.Date },\r\n    published: { type: schema.Boolean, default: false, index: true }\r\n});\r\n\r\nvar User = schema.define('User', {\r\n    name:       { type: schema.String,  limit: 255 },\r\n    bio:        { type: schema.Text },\r\n    email:      { type: schema.String,  limit: 155, unique: true },\r\n    approved:   { type: schema.Boolean, default: false, index: true }\r\n    joinedAt:   { type: schema.Date,    default: Date.now },\r\n    age:        { type: schema.Number },\r\n    gender:     { type: schema.String,  limit: 10 }\r\n});\r\n\r\n// setup hooks\r\nPost.afterUpdate = function (next) {\r\n    this.updated = new Date();\r\n    this.save();\r\n    next();\r\n};\r\n\r\n// define any custom method for instance\r\nUser.prototype.getNameAndAge = function () {\r\n    return this.name + ', ' + this.age;\r\n};\r\n\r\n// define scope\r\nPost.scope('active', { published : true });\r\n\r\n// setup validations\r\nUser.validatesPresenceOf('name', 'email');\r\nUser.validatesUniquenessOf('email', {message: 'email is not unique'});\r\nUser.validatesInclusionOf('gender', {in: ['male', 'female']});\r\nUser.validatesNumericalityOf('age', {int: true});\r\n\r\n// setup relationships\r\nUser.hasMany(Post,   {as: 'posts',  foreignKey: 'userId'});\r\n\r\n// Common API methods\r\n\r\nvar user = new User({ \r\n    name:       'Alex',\r\n    email:      'example@domain.aga',\r\n    age:        40,\r\n    gender:     'male'\r\n});\r\n\r\nuser.isValid(function (valid) {\r\n    if (!valid) {\r\n        return console.log(user.errors);\r\n    }\r\n    user.save(function(err){\r\n        if (!err) {\r\n            return console.log(err);\r\n        }\r\n        console.log('User created');\r\n    });\r\n})\r\n\r\n// just instantiate model\r\nnew Post\r\n// save model (of course async)\r\nPost.create(cb);\r\n// all posts\r\nPost.all(cb)\r\n// all posts by user\r\nPost.all({where: {userId: user.id}, order: 'id', limit: 10, skip: 20});\r\n// the same as prev\r\nuser.posts(cb)\r\n// get one latest post\r\nPost.findOne({where: {published: true}, order: 'date DESC'}, cb);\r\n// same as new Post({userId: user.id});\r\nuser.posts.build\r\n// save as Post.create({userId: user.id}, cb);\r\nuser.posts.create(cb)\r\n// find instance by id\r\nUser.findById(1, cb)\r\n// count instances\r\nUser.count([conditions, ]cb)\r\n// destroy instance\r\nuser.destroy(cb);\r\n// destroy all instances\r\nUser.destroyAll(cb);\r\n\r\n// models also accessible in schema:\r\nschema.models.User;\r\nschema.models.Post;\r\n```\r\n\r\n## Package structure\r\n\r\nNow all common logic described in `./lib/*.js`, and database-specific stuff in `./lib/adapters/*.js`. It's super-tiny, right?\r\n\r\n## Contributing\r\n\r\nIf you have found a bug please write unit test, and make sure all other tests still pass before pushing code to repo.\r\n\r\n## Recommend extensions\r\n\r\n- [TrinteJS - Javascrpt MVC Framework for Node.JS](http://www.trintejs.com/)\r\n- [Cross-db Session Storage for ExpressJS](https://github.com/biggora/express-mongodb)\r\n- [MongoDB Session Storage for ExpressJS](https://github.com/biggora/connect-caminte)\r\n- [Middleware exposing user-agent for NodeJS](https://github.com/biggora/express-useragent)\r\n- [Uploading files middleware for NodeJS](https://github.com/biggora/express-uploader)\r\n- [2CO NodeJS adapter for 2checkout API payment gateway](https://github.com/biggora/2co)\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011 by Anatoliy Chakkaev <mail [åt] anatoliy [døt] in>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n## Resources\r\n\r\n- Visit the [author website](http://www.gordejev.lv).\r\n- Visit the [CaminteJS](http://www.camintejs.com) home page.\r\n- Follow [@biggora](https://twitter.com/#!/biggora) on Twitter for updates.\r\n- Report issues on the [github issues](https://github.com/biggora/caminte/issues) page.\r\n\r\n[![Analytics](https://ga-beacon.appspot.com/UA-22788134-5/caminte/readme)](https://github.com/igrigorik/ga-beacon) \r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/biggora/caminte/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/biggora/caminte/issues"
  },
  "_id": "caminte@0.2.6",
  "dist": {
    "shasum": "f88738bfb8df9d704d860959ca4051490d70832f"
  },
  "_from": "caminte@",
  "_resolved": "https://registry.npmjs.org/caminte/-/caminte-0.2.6.tgz"
}
